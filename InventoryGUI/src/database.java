
/*  This build is made using a Netbeans Ant build
    The SQL library is added manually
    You can connect to the database using Services > Databases > and connecting to the local database server.

    A lot of the code and comments here are auto-generated by Netbeans

    To get it working in IntelliJ, make sure the src folder is included in File > Project > Modules > Sources
*/

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.*;
import javax.swing.table.*;

public class database extends javax.swing.JFrame {
    
    static String url = "jdbc:mysql://127.0.0.1:3306/?user=root";
    static String user = "root";
    static String password = "admin";
    static Connection myConn;
    
    private boolean newProduct = true;
    private boolean newUser = true;
    private boolean pastLogin = false;
    
    public database() {
        initComponents();
        this.setLocationRelativeTo(null);
        addProductFrame.setLocationRelativeTo(null);
        addUserFrame.setLocationRelativeTo(null);
        loginFrame.setLocationRelativeTo(null);
        userFrame.setLocationRelativeTo(null);
        
        loginFrame.setVisible(true);
        resetSearchProductButton.setVisible(false);
        resetSearchUserButton.setVisible(false);
        
        //Initialize Product Table
        updateProductTable();
        updateUserTable();
        productTable.setDefaultEditor(Object.class, null);
        userTable.setDefaultEditor(Object.class, null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addProductFrame = new javax.swing.JFrame();
        pNameField = new javax.swing.JTextField();
        pNameText = new javax.swing.JLabel();
        pDescriptionText = new javax.swing.JLabel();
        pDescriptionScrollPane = new javax.swing.JScrollPane();
        pDescriptionField = new javax.swing.JTextArea();
        pCategoryText = new javax.swing.JLabel();
        pCategoryField = new javax.swing.JTextField();
        pPriceText = new javax.swing.JLabel();
        pPriceField = new javax.swing.JTextField();
        pStockText = new javax.swing.JLabel();
        pStockField = new javax.swing.JTextField();
        pMinStockText = new javax.swing.JLabel();
        pMinStockField = new javax.swing.JTextField();
        pMaxStockField = new javax.swing.JTextField();
        pMaxStockText = new javax.swing.JLabel();
        pConfirmButton = new javax.swing.JButton();
        pCancelButton = new javax.swing.JButton();
        addUserFrame = new javax.swing.JFrame();
        uFirstNameField = new javax.swing.JTextField();
        uAccessText = new javax.swing.JLabel();
        uFirstNameText = new javax.swing.JLabel();
        uAccessField = new javax.swing.JTextField();
        uLastNameText = new javax.swing.JLabel();
        uEmailText = new javax.swing.JLabel();
        uConfirmButton = new javax.swing.JButton();
        uEmailField = new javax.swing.JTextField();
        uCancelButton = new javax.swing.JButton();
        uPasswordText = new javax.swing.JLabel();
        uLastNameField = new javax.swing.JTextField();
        uPasswordField = new javax.swing.JPasswordField();
        userFrame = new javax.swing.JFrame();
        userPanel = new javax.swing.JPanel();
        updateUserButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        userBackButton = new javax.swing.JButton();
        userTableScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        searchUserField = new javax.swing.JTextField();
        searchUserButton = new javax.swing.JButton();
        addUserButton1 = new javax.swing.JButton();
        resetSearchUserButton = new javax.swing.JButton();
        loginFrame = new javax.swing.JFrame();
        usernameText = new javax.swing.JLabel();
        passwordText = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        addUserButton = new javax.swing.JButton();
        loginErrorMsg = new javax.swing.JLabel();
        productFrame = new javax.swing.JPanel();
        updateProductButton = new javax.swing.JButton();
        addProductButton = new javax.swing.JButton();
        removeProductButton = new javax.swing.JButton();
        productBackButton = new javax.swing.JButton();
        productTableScrollPane = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        searchProductField = new javax.swing.JTextField();
        searchProductButton = new javax.swing.JButton();
        viewUsersButton = new javax.swing.JButton();
        resetSearchProductButton = new javax.swing.JButton();

        addProductFrame.setTitle("Add Product");
        addProductFrame.setMinimumSize(new java.awt.Dimension(370, 370));

        pNameText.setText("Name:");

        pDescriptionText.setText("Description:");

        pDescriptionField.setColumns(20);
        pDescriptionField.setRows(5);
        pDescriptionScrollPane.setViewportView(pDescriptionField);

        pCategoryText.setText("Category:");

        pPriceText.setText("Price:");

        pStockText.setText("Stock:");

        pMinStockText.setText("Min Stock:");

        pMaxStockText.setText("Max Stock:");

        pConfirmButton.setText("Confirm");
        pConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pConfirmButtonActionPerformed(evt);
            }
        });

        pCancelButton.setText("Cancel");
        pCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addProductFrameLayout = new javax.swing.GroupLayout(addProductFrame.getContentPane());
        addProductFrame.getContentPane().setLayout(addProductFrameLayout);
        addProductFrameLayout.setHorizontalGroup(
            addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addProductFrameLayout.createSequentialGroup()
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addProductFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addProductFrameLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(pConfirmButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pCancelButton))
                            .addGroup(addProductFrameLayout.createSequentialGroup()
                                .addComponent(pDescriptionText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 26, Short.MAX_VALUE))))
                    .addGroup(addProductFrameLayout.createSequentialGroup()
                        .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addProductFrameLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(pNameText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addProductFrameLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(pStockText)
                                        .addComponent(pPriceText)
                                        .addComponent(pMinStockText))
                                    .addComponent(pCategoryText, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pPriceField)
                                        .addComponent(pStockField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addProductFrameLayout.createSequentialGroup()
                                        .addComponent(pMinStockField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(pMaxStockText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pMaxStockField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(pCategoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addProductFrameLayout.setVerticalGroup(
            addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addProductFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pNameText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pDescriptionText)
                    .addComponent(pDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pCategoryText)
                    .addComponent(pCategoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pPriceText)
                    .addComponent(pPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pStockText)
                    .addComponent(pStockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pMinStockText)
                    .addComponent(pMinStockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pMaxStockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pMaxStockText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(addProductFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pConfirmButton)
                    .addComponent(pCancelButton))
                .addContainerGap())
        );

        addUserFrame.setTitle("Add User");
        addUserFrame.setMinimumSize(new java.awt.Dimension(400, 220));

        uAccessText.setText("Access:");

        uFirstNameText.setText("First Name:");

        uLastNameText.setText("Last Name:");

        uEmailText.setText("Email:");

        uConfirmButton.setText("Confirm");
        uConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uConfirmButtonActionPerformed(evt);
            }
        });

        uCancelButton.setText("Cancel");
        uCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uCancelButtonActionPerformed(evt);
            }
        });

        uPasswordText.setText("Password:");

        javax.swing.GroupLayout addUserFrameLayout = new javax.swing.GroupLayout(addUserFrame.getContentPane());
        addUserFrame.getContentPane().setLayout(addUserFrameLayout);
        addUserFrameLayout.setHorizontalGroup(
            addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addUserFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addUserFrameLayout.createSequentialGroup()
                        .addGap(0, 240, Short.MAX_VALUE)
                        .addComponent(uConfirmButton))
                    .addGroup(addUserFrameLayout.createSequentialGroup()
                        .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(uLastNameText)
                            .addComponent(uFirstNameText)
                            .addComponent(uEmailText)
                            .addComponent(uPasswordText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uEmailField)
                            .addGroup(addUserFrameLayout.createSequentialGroup()
                                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(uFirstNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                        .addComponent(uLastNameField))
                                    .addComponent(uPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uCancelButton)
                .addGap(10, 10, 10))
            .addGroup(addUserFrameLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(uAccessText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uAccessField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addUserFrameLayout.setVerticalGroup(
            addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addUserFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uFirstNameText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uLastNameText)
                    .addComponent(uLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uEmailText)
                    .addComponent(uEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uPasswordText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uAccessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uAccessText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(addUserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uConfirmButton)
                    .addComponent(uCancelButton))
                .addContainerGap())
        );

        userFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        userFrame.setTitle("Users");
        userFrame.setMinimumSize(new java.awt.Dimension(650, 550));

        userPanel.setMinimumSize(new java.awt.Dimension(600, 500));

        updateUserButton.setText("Update User");
        updateUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUserButtonActionPerformed(evt);
            }
        });

        removeUserButton.setText("Remove User");
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserButtonActionPerformed(evt);
            }
        });

        userBackButton.setText("Back");
        userBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userBackButtonActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Email", "Password", "Last Login Date", "Access"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userTableScrollPane1.setViewportView(userTable);

        searchUserButton.setText("Search");
        searchUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserButtonActionPerformed(evt);
            }
        });

        addUserButton1.setText("Add User");
        addUserButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButton1ActionPerformed(evt);
            }
        });

        resetSearchUserButton.setText("Reset Search");
        resetSearchUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSearchUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userTableScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                        .addComponent(removeUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resetSearchUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(searchUserButton))
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateUserButton)
                            .addComponent(addUserButton1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserButton)
                    .addComponent(resetSearchUserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userBackButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                        .addComponent(updateUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addUserButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeUserButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout userFrameLayout = new javax.swing.GroupLayout(userFrame.getContentPane());
        userFrame.getContentPane().setLayout(userFrameLayout);
        userFrameLayout.setHorizontalGroup(
            userFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        userFrameLayout.setVerticalGroup(
            userFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        loginFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        loginFrame.setTitle("Login");
        loginFrame.setMinimumSize(new java.awt.Dimension(300, 180));

        usernameText.setText("Username: ");

        passwordText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        addUserButton.setText("Add User");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        loginErrorMsg.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout loginFrameLayout = new javax.swing.GroupLayout(loginFrame.getContentPane());
        loginFrame.getContentPane().setLayout(loginFrameLayout);
        loginFrameLayout.setHorizontalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginFrameLayout.createSequentialGroup()
                        .addComponent(usernameText)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(loginFrameLayout.createSequentialGroup()
                        .addGap(0, 140, Short.MAX_VALUE)
                        .addComponent(loginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addUserButton))
                    .addGroup(loginFrameLayout.createSequentialGroup()
                        .addComponent(passwordText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginFrameLayout.createSequentialGroup()
                                .addComponent(loginErrorMsg)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(usernameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordField))))
                .addContainerGap())
        );
        loginFrameLayout.setVerticalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFrameLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameText)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginErrorMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addUserButton)
                    .addComponent(loginButton))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Product Table");
        setMinimumSize(new java.awt.Dimension(600, 550));

        productFrame.setMinimumSize(new java.awt.Dimension(600, 500));
        productFrame.setPreferredSize(new java.awt.Dimension(600, 500));

        updateProductButton.setText("Update Product");
        updateProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProductButtonActionPerformed(evt);
            }
        });

        addProductButton.setText("Add Product");
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });

        removeProductButton.setText("Remove Product");
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });

        productBackButton.setText("Back");
        productBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productBackButtonActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ProductID", "orderID", "Description", "Price", "Name", "In Stock", "Max Stock", "Min Stock", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setRowHeight(20);
        productTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productTable.setShowGrid(true);
        productTableScrollPane.setViewportView(productTable);

        searchProductButton.setText("Search");
        searchProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductButtonActionPerformed(evt);
            }
        });

        viewUsersButton.setText("View Users");
        viewUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUsersButtonActionPerformed(evt);
            }
        });

        resetSearchProductButton.setText("Reset Search");
        resetSearchProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSearchProductButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productFrameLayout = new javax.swing.GroupLayout(productFrame);
        productFrame.setLayout(productFrameLayout);
        productFrameLayout.setHorizontalGroup(
            productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productFrameLayout.createSequentialGroup()
                        .addGroup(productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeProductButton)
                            .addComponent(addProductButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productFrameLayout.createSequentialGroup()
                        .addComponent(viewUsersButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetSearchProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(searchProductButton))
                    .addGroup(productFrameLayout.createSequentialGroup()
                        .addComponent(updateProductButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        productFrameLayout.setVerticalGroup(
            productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchProductField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchProductButton)
                    .addComponent(viewUsersButton)
                    .addComponent(resetSearchProductButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(productTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productBackButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productFrameLayout.createSequentialGroup()
                        .addComponent(updateProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addProductButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeProductButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(productFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProductButtonActionPerformed
        int row = productTable.getSelectedRow();
        String queryID = productTable.getModel().getValueAt(row, 0).toString();
        
        try{
            Statement stmt = myConn.createStatement();
            String query = "select * from our_company.product where product_ID=" + queryID;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            
            pNameField.setText(rs.getString("product_name"));
            pDescriptionField.setText(rs.getString("description"));
            pCategoryField.setText(rs.getString("category"));
            pPriceField.setText(rs.getInt("price")+"");
            pStockField.setText(rs.getInt("in_stock")+"");
            pMinStockField.setText(rs.getInt("min_stock")+"");
            pMaxStockField.setText(rs.getInt("max_stock")+"");
        }catch (SQLException ex){System.out.println("Error tring to update product");}
        
        
        newProduct = false;
        
        addProductFrame.setTitle("Update Product");
        addProductFrame.setVisible(true);
    }//GEN-LAST:event_updateProductButtonActionPerformed

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        //Reset all text fields/areas to null
        pNameField.setText("");
        pDescriptionField.setText("");
        pCategoryField.setText("");
        pPriceField.setText("");
        pStockField.setText("");
        pMinStockField.setText("");
        pMaxStockField.setText("");
        newProduct = true;
        
        addProductFrame.setTitle("Add Product");
        addProductFrame.setVisible(true);
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void pCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCancelButtonActionPerformed
        addProductFrame.setVisible(false);
    }//GEN-LAST:event_pCancelButtonActionPerformed

    private void pConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pConfirmButtonActionPerformed
        if(newProduct)
            addProduct();
        else
            updateProduct();
        addProductFrame.setVisible(false);
    }//GEN-LAST:event_pConfirmButtonActionPerformed

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        //Reset all text fields/areas to null
        uFirstNameField.setText("");
        uLastNameField.setText("");
        uEmailField.setText("");
        uPasswordField.setText("");
        uAccessField.setText("");
        newUser = true;
        
        addUserFrame.setTitle("Add User");
        addUserFrame.setVisible(true);
        loginFrame.setVisible(false);
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void uConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uConfirmButtonActionPerformed
        if(newUser)
            addUser();
        else
            updateUser();
        addUserFrame.setVisible(false);
        
        if(!pastLogin)
            loginFrame.setVisible(true);
    }//GEN-LAST:event_uConfirmButtonActionPerformed

    private void uCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uCancelButtonActionPerformed
        addUserFrame.setVisible(false);
        
        if(!pastLogin)
            loginFrame.setVisible(true);
    }//GEN-LAST:event_uCancelButtonActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        deleteProduct();
    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        boolean loginSuccess = true;    //initially false
        /* pseudocode for login handling
        if( inputted email is in database )
            if( inputted password matches email's password)
                loginSuccess = true
        */
        
        if(loginSuccess){   //login success (determined by comparing email and password)
            loginFrame.setVisible(false);
            setVisible(true);
            pastLogin = true;
            
            //also update last_login_date here
        }
        else{   //login failed
            
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void productBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productBackButtonActionPerformed
        this.setVisible(false);
        loginFrame.setVisible(true);
        pastLogin = false;
    }//GEN-LAST:event_productBackButtonActionPerformed

    private void addUserButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButton1ActionPerformed
        //Reset all text fields/areas to null
        uFirstNameField.setText("");
        uLastNameField.setText("");
        uEmailField.setText("");
        uPasswordField.setText("");
        uAccessField.setText("");
        newUser = true;
        
        addUserFrame.setTitle("Add User");
        addUserFrame.setVisible(true);
    }//GEN-LAST:event_addUserButton1ActionPerformed

    private void updateUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUserButtonActionPerformed
        int row = userTable.getSelectedRow();
        String queryID = userTable.getModel().getValueAt(row, 0).toString();
        
        try{
            Statement stmt = myConn.createStatement();
            String query = "select * from our_company.users where user_ID=" + queryID;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            
            uFirstNameField.setText(rs.getString("first_name"));
            uLastNameField.setText(rs.getString("last_name"));
            uEmailField.setText(rs.getString("email_ID"));
            uPasswordField.setText(rs.getString("password")+"");
            uAccessField.setText(rs.getInt("access")+"");
        }catch (SQLException ex){System.out.println("Error tring to update user");}
        
        
        newUser = false;
        
        addUserFrame.setTitle("Update User");
        addUserFrame.setVisible(true);
    }//GEN-LAST:event_updateUserButtonActionPerformed

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserButtonActionPerformed
        deleteUser();
    }//GEN-LAST:event_removeUserButtonActionPerformed

    private void userBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userBackButtonActionPerformed
        userFrame.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_userBackButtonActionPerformed

    private void viewUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUsersButtonActionPerformed
        //if users.access >= 2 or something
        setVisible(false);
        userFrame.setVisible(true);
        //else deny access
    }//GEN-LAST:event_viewUsersButtonActionPerformed

    private void searchUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserButtonActionPerformed
        String querySearch = searchUserField.getText();
        if(!querySearch.equals("")){
            searchUser(querySearch);
            resetSearchUserButton.setVisible(true);
        }
    }//GEN-LAST:event_searchUserButtonActionPerformed

    private void searchProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductButtonActionPerformed
        String querySearch = searchProductField.getText();
        if(!querySearch.equals("")){
            searchProduct(querySearch);
            resetSearchProductButton.setVisible(true);
        }
    }//GEN-LAST:event_searchProductButtonActionPerformed

    private void resetSearchProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSearchProductButtonActionPerformed
        searchProduct("");
        searchProductField.setText("");
        resetSearchProductButton.setVisible(false);
    }//GEN-LAST:event_resetSearchProductButtonActionPerformed

    private void resetSearchUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSearchUserButtonActionPerformed
        searchUser("");
        searchUserField.setText("");
        resetSearchUserButton.setVisible(false);
    }//GEN-LAST:event_resetSearchUserButtonActionPerformed

    //Adds a user to the database based on the info inputted in the addUserFrame
    public void addUser(){
        
        try {
            myConn = DriverManager.getConnection(url,user,password);            
            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.users ORDER BY user_ID DESC LIMIT 1";
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            int recentUserID = rs.getInt("user_ID");
            
            String sql = "insert into our_company.users (user_ID, first_name, last_name, email_ID, password, last_login_date, access) values (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = myConn.prepareStatement(sql);
            statement.setInt(1, recentUserID+1);
            statement.setString(2, uFirstNameField.getText());
            statement.setString(3, uLastNameField.getText());
            statement.setString(4, uEmailField.getText());
            statement.setString(5, new String(uPasswordField.getPassword()));
            statement.setDate(6, java.sql.Date.valueOf(java.time.LocalDate.now()));
            statement.setInt(7, Integer.parseInt(uAccessField.getText()));

            int rowsInserted = statement.executeUpdate();
            if(rowsInserted > 0){
                System.out.println("New user inserted successfully!");
            }

        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        
        updateUserTable();
        
    }
    
    public void updateUser(){
        int row = userTable.getSelectedRow();
        String queryID = userTable.getModel().getValueAt(row, 0).toString();
        try {
            myConn = DriverManager.getConnection(url,user,password);

            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.users where user_ID="+queryID;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            
            int id = rs.getInt("user_ID");
            String firstName = uFirstNameField.getText();
            String lastName = uLastNameField.getText();
            String email = uEmailField.getText();
            String password = new String(uPasswordField.getPassword());
            //Date date = java.sql.Date.valueOf(java.time.LocalDate.now());     //login date isn't affected by updates
            int access = Integer.parseInt(uAccessField.getText());
            
            String sql = "update our_company.users set "
                    + "first_name ='" + firstName + "',"
                    + "last_name ='" + lastName + "',"
                    + "email_ID ='" + email + "',"
                    + "password ='" + password + "',"
                    //+ "last_login_date = now(),"
                    + "access =" + access + ""
                    + " where user_ID =" + queryID;
            System.out.println(sql);

            PreparedStatement p = myConn.prepareStatement(sql);
            p.execute();
            
        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        
        updateUserTable();
        System.out.println("User successfully updated");
    }
    
    public void updateUserTable(){    
        try {
            myConn = DriverManager.getConnection(url,user,password);
            PreparedStatement pst = myConn.prepareStatement("select * from our_company.users"); 
            ResultSet rs = pst.executeQuery();
            
            DefaultTableModel table = new DefaultTableModel(new String [] {"ID", "First Name", "Last Name", "Email", "Password", "Last Login Date", "Access"},0);
            
            while (rs.next()) { 
                int id = rs.getInt("user_ID");
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                String email = rs.getString("email_ID");
                String password = rs.getString("password");
                Date date = rs.getDate("last_login_date");
                int access = rs.getInt("access");
                
                table.addRow(new Object[]{id, firstName, lastName, email, password, date, access});
            
            }
            userTable.setModel(table);
            
        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
        
    }
    
    public void searchUser(String querySearch){
        try {
            myConn = DriverManager.getConnection(url,user,password);
            //how query should look like: select * from our_company.product where product_name LIKE '%Red%' OR description LIKE '%Red%'
            PreparedStatement pst = myConn.prepareStatement("select * from our_company.users where first_name LIKE '%" + querySearch + "%' "
                                                                                               + "OR last_name LIKE '%"+querySearch+"%' "
                                                                                               + "OR user_ID LIKE '%"+querySearch+"%' "
                                                                                               + "OR access LIKE '%"+querySearch+"%' ");
            ResultSet rs = pst.executeQuery();
            
            DefaultTableModel table = new DefaultTableModel(new String [] {"ID", "First Name", "Last Name", "Email", "Password", "Last Login Date", "Access"},0);
            
            while (rs.next()) { 
                int id = rs.getInt("user_ID");
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                String email = rs.getString("email_ID");
                String password = rs.getString("password");
                Date date = rs.getDate("last_login_date");
                int access = rs.getInt("access");
                
                table.addRow(new Object[]{id, firstName, lastName, email, password, date, access});
            
            }
            userTable.setModel(table);
            
        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
    }
    
    public void deleteUser(){
        int row = userTable.getSelectedRow();
        String queryID = userTable.getModel().getValueAt(row, 0).toString();
        String query = "delete from our_company.users where user_ID=" + queryID;
        
        try {
            myConn = DriverManager.getConnection(url,user,password);
            PreparedStatement pst = myConn.prepareStatement(query); 
            pst.execute();

        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
        
        updateUserTable();
        System.out.println("User successfully removed");
    }
    
    //Adds a product into the database based on the info inputted in the addProductFrame
    public void addProduct(){
        
        try {
            myConn = DriverManager.getConnection(url,user,password);
            if (myConn != null) {
                //System.out.println("Successfully connected to MySQL database test");
            }
            
            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.product ORDER BY product_ID DESC LIMIT 1";
            ResultSet rs = stmt.executeQuery(query);
            rs.next();
            int recentProductID = rs.getInt("product_ID");

            //  ---INSERT STATEMENT---
            String sql = "insert into our_company.product (product_ID, order_ID, description, Price, product_name, in_stock, max_stock, min_stock, category) values (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = myConn.prepareStatement(sql);
            
            statement.setInt(1, recentProductID+1);
            statement.setInt(2, 1); //not sure how to link to order_ID
            statement.setString(3, pDescriptionField.getText());
            statement.setDouble(4, Double.parseDouble(pPriceField.getText()));
            statement.setString(5, pNameField.getText());
            statement.setInt(6, Integer.parseInt(pStockField.getText()));
            statement.setInt(7, Integer.parseInt(pMaxStockField.getText()));
            statement.setInt(8, Integer.parseInt(pMinStockField.getText()));
            statement.setString(9, pCategoryField.getText());

            int rowsInserted = statement.executeUpdate();
            if(rowsInserted > 0){
                System.out.println("New product added successfully!");
            }

        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        
        updateProductTable();
    }
    
    //Updates the selected product on the database
    public void updateProduct(){
        int row = productTable.getSelectedRow();
        String queryID = productTable.getModel().getValueAt(row, 0).toString();
        try {
            myConn = DriverManager.getConnection(url,user,password);

            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.product where product_ID="+queryID;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();

            int id = rs.getInt("product_ID");
            int orderID = rs.getInt("order_ID");
            String description = pDescriptionField.getText();
            double price = Double.parseDouble(pPriceField.getText());
            String name = pNameField.getText();
            int stock = Integer.parseInt(pStockField.getText());
            int maxStock = Integer.parseInt(pMaxStockField.getText());
            int minStock = Integer.parseInt(pMinStockField.getText());
            String category = pCategoryField.getText();

            String sql = "update our_company.product set "
                    + "description ='" + description + "',"
                    + "price =" + price + ","
                    + "product_name='" + name + "',"
                    + "in_stock=" + stock + ","
                    + "min_stock=" + minStock + ","
                    + "max_stock=" + maxStock + ","
                    + "category='" + category + "'"
                    + " where product_ID=" + queryID;
            System.out.println(sql);

            PreparedStatement p = myConn.prepareStatement(sql);
            p.execute();
            
        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        
        updateProductTable();
        System.out.println("Product successfully updated");
    }
    
    //Helps Update the GUI whenever the product table is changed
    public void updateProductTable(){
                
        try {
            myConn = DriverManager.getConnection(url,user,password);
            PreparedStatement pst = myConn.prepareStatement("select * from our_company.product"); 
            ResultSet rs = pst.executeQuery();
            
            DefaultTableModel table = new DefaultTableModel(new String [] {"ProductID", "orderID", "Description", "Price", "Name", "In Stock", "Max Stock", "Min Stock", "Category"},0);
            
            while (rs.next()) { 
                int id = rs.getInt("product_ID");
                int orderID = rs.getInt("order_ID");
                String description = rs.getString("description");
                double price = rs.getDouble("Price");
                String name = rs.getString("product_name");
                int stock = rs.getInt("in_stock");
                int maxStock = rs.getInt("max_stock");
                int minStock = rs.getInt("min_stock");
                String category = rs.getString("category");

                table.addRow(new Object[]{id, orderID, description, price, name, stock, maxStock, minStock, category});
                
            }
            productTable.setModel(table);
            
        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
        
    }
    
    public void searchProduct(String querySearch){
        try {
            myConn = DriverManager.getConnection(url,user,password);
            //how query should look like: select * from our_company.product where product_name LIKE '%Red%' OR description LIKE '%Red%'
            PreparedStatement pst = myConn.prepareStatement("select * from our_company.product where product_name LIKE '%" + querySearch + "%' "
                                                                                               + "OR description LIKE '%"+querySearch+"%' "
                                                                                               + "OR product_ID LIKE '%"+querySearch+"%' "
                                                                                               + "OR category LIKE '%"+querySearch+"%' "
                                                                                               + "OR price LIKE '%"+querySearch+"%' "); 
            ResultSet rs = pst.executeQuery();
            
            DefaultTableModel table = new DefaultTableModel(new String [] {"ProductID", "orderID", "Description", "Price", "Name", "In Stock", "Max Stock", "Min Stock", "Category"},0);
            

            while (rs.next()) { 
                int id = rs.getInt("product_ID");
                int orderID = rs.getInt("order_ID");
                String description = rs.getString("description");
                double price = rs.getDouble("Price");
                String name = rs.getString("product_name");
                int stock = rs.getInt("in_stock");
                int maxStock = rs.getInt("max_stock");
                int minStock = rs.getInt("min_stock");
                String category = rs.getString("category");

                table.addRow(new Object[]{id, orderID, description, price, name, stock, maxStock, minStock, category});
                
            }
            productTable.setModel(table);
            
        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
    }
    
    //Deletes a product from the database
    //Note: GUI isn't updating when deleting the last product
    public void deleteProduct(){
        int row = productTable.getSelectedRow();
        String queryID = productTable.getModel().getValueAt(row, 0).toString();
        String query = "delete from our_company.product where product_ID=" + queryID;
        
        try {
            myConn = DriverManager.getConnection(url,user,password);
            PreparedStatement pst = myConn.prepareStatement(query); 
            pst.execute();


        }catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
        }
        
        updateProductTable();
        System.out.println("Product successfully removed");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(database.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new database().setVisible(false);
            }
        });
        
        
        /*
        {
        try {
            myConn = DriverManager.getConnection(url,user,password);
            if (myConn != null) {
                System.out.println("Successfully connected to MySQL database test");
            }
        }
            catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
            }
        }
        
        /* ---SQL CONNECTION---
        String url = "jdbc:mysql://127.0.0.1:3306/?user=root";
        String user = "root";
        String password = "admin";
        Connection myConn;

        {
            try {
                myConn = DriverManager.getConnection(url,user,password);
                if (myConn != null) {
                    System.out.println("Successfully connected to MySQL database test");
                }

                //  ---INSERT STATEMENT---
                String sql = "insert into our_company.users (user_ID, first_name, last_name, email_ID, password, last_login_date, access) values (?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement statement = myConn.prepareStatement(sql);
                statement.setInt(1, 1);
                statement.setString(2, "Bill");
                statement.setString(3, "Gates");
                statement.setString(4, "bg@gmail.com");
                statement.setString(5, "bgpass");
                statement.setDate(6, java.sql.Date.valueOf(java.time.LocalDate.now()));
                statement.setInt(7, 1);

                int rowsInserted = statement.executeUpdate();
                if(rowsInserted > 0){
                    System.out.println("New user inserted successfully!");
                }

                //  ---SELECT STATEMENT---
                sql = "select * from our_company.users";
                Statement myStmt = myConn.createStatement();
                ResultSet rs = myStmt.executeQuery(sql);

                while (rs.next()) {
                    int id = rs.getInt(1);
                    String firstName = rs.getString(2);
                    String lastName = rs.getString(3);
                    String email = rs.getString(4);
                    String pass = rs.getString(5);

                    String output = "User #%d: %s - %s - %s - %s";
                    System.out.println(String.format(output, id, firstName, lastName, email, pass));
                }



            } catch (SQLException ex) {
                System.out.println("An error occurred while connecting MySQL databse");
                                ex.printStackTrace();
                throw new RuntimeException(ex);
            }
        }
        
        //---END OF SQL INSTRUCTIONS---*/

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductButton;
    private javax.swing.JFrame addProductFrame;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton addUserButton1;
    private javax.swing.JFrame addUserFrame;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginErrorMsg;
    private javax.swing.JFrame loginFrame;
    private javax.swing.JButton pCancelButton;
    private javax.swing.JTextField pCategoryField;
    private javax.swing.JLabel pCategoryText;
    private javax.swing.JButton pConfirmButton;
    private javax.swing.JTextArea pDescriptionField;
    private javax.swing.JScrollPane pDescriptionScrollPane;
    private javax.swing.JLabel pDescriptionText;
    private javax.swing.JTextField pMaxStockField;
    private javax.swing.JLabel pMaxStockText;
    private javax.swing.JTextField pMinStockField;
    private javax.swing.JLabel pMinStockText;
    private javax.swing.JTextField pNameField;
    private javax.swing.JLabel pNameText;
    private javax.swing.JTextField pPriceField;
    private javax.swing.JLabel pPriceText;
    private javax.swing.JTextField pStockField;
    private javax.swing.JLabel pStockText;
    private javax.swing.JTextField passwordField;
    private javax.swing.JLabel passwordText;
    private javax.swing.JButton productBackButton;
    private javax.swing.JPanel productFrame;
    private javax.swing.JTable productTable;
    private javax.swing.JScrollPane productTableScrollPane;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JButton resetSearchProductButton;
    private javax.swing.JButton resetSearchUserButton;
    private javax.swing.JButton searchProductButton;
    private javax.swing.JTextField searchProductField;
    private javax.swing.JButton searchUserButton;
    private javax.swing.JTextField searchUserField;
    private javax.swing.JTextField uAccessField;
    private javax.swing.JLabel uAccessText;
    private javax.swing.JButton uCancelButton;
    private javax.swing.JButton uConfirmButton;
    private javax.swing.JTextField uEmailField;
    private javax.swing.JLabel uEmailText;
    private javax.swing.JTextField uFirstNameField;
    private javax.swing.JLabel uFirstNameText;
    private javax.swing.JTextField uLastNameField;
    private javax.swing.JLabel uLastNameText;
    private javax.swing.JPasswordField uPasswordField;
    private javax.swing.JLabel uPasswordText;
    private javax.swing.JButton updateProductButton;
    private javax.swing.JButton updateUserButton;
    private javax.swing.JButton userBackButton;
    private javax.swing.JFrame userFrame;
    private javax.swing.JPanel userPanel;
    private javax.swing.JTable userTable;
    private javax.swing.JScrollPane userTableScrollPane1;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameText;
    private javax.swing.JButton viewUsersButton;
    // End of variables declaration//GEN-END:variables
}
